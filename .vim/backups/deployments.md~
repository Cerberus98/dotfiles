Deployments
===============

Existing examples:

Today all we have is Xena and some scripts to deploy 4 VM Targets spun up in proxmox.

Solar is, at the time of this writing 10/12/2016, deploying to CIS as follows:

# They pre-spun a bunch of rhel7 instances
# They added the IPs/hostnames of those instances to an ansible inventory file
# Dockered up all their services
# Wrote some ansible scripts to do Configuration
  * Their configuration may assume specific IP addresses, as they never tear down the old VMs they're deploying to

Whatever the path we choose, it should be consistent:

* There could be a pre-deploy, provision step (like Xena does already)
* The deployment step for individual nodes should use RPMs (precedent is already set)
* The configuration step is currently done in ansible, doesn't strictly need to be long term (but might as well be since everyone speaks it)

Let's say right now there are six deployment phases:
# Packaging
# Provisioning
# Installation and Local Configuration
# Cluster Configuration
# Available

It's important to realize that these are only semantic separations and several steps may be combined into one logical phase. Additionally, some phases may not provide the entirety of the orchestration necessary to complete that phase, i.e. a single Configuration step may only set up one host, but require additional, cluster-aware Configuration to be fully Configured.

Packaging
===============
This is where the installation media is built. Other things could be bundled up here, such as Configuration. Ideally as much Configuration as possible is baked in here. An example of Configuration to bake in at Packaging time is static Configuration that won't change between deployments, like the set of middleware for the django app being deployed. Templates used in output rendering could arguably be another form of static, Packaging-worthy configuration. An example of Configuration that MUST be baked in during the Packaging phase is networking information to provide connectivity for hosts in the Provisioning phase that have no other means (DHCP, static networking from Nova) of acquiring it, as is the case when booting the first MCP node in a customer availability zone. 

In addition to actually creating the Deployable artifact, this phase typically includes some form of testing, with unit testing being the bare minimum.

Provisioning
===============
This is where sockets, RAM and storage are allocated and VMs/Bare Metal/Containers are booted. A local development environment could create one or more VMs with Vagrant or even do nothing at all. Depending on the deployment process, the Installation and Provision phases could be one and the same. In other words, the hosts being Provisioned may be booted with an ISO created in the packaging phase that supplies Installation and Configuration. This phase requires prior knowledge of the *intended* inventory; in other words, what is the optimal *distribution* of nodes one intends to provide.

Installation and Local Configuration
===============
The Installation phase is about Installing the software comprising one of your services plus as pre-requisite software and services. This phase may, but is not required to, provide all the Configuration necessary to provide the service in question. Examples of Installation could be downloading and starting a Docker container, installing a collection of RPMs (both official distribution Packages and ones created during the Packaging phase) or cloning a git repo onto the file system.

Cluster Configuration
===============
This phase represents any Configuration that can only be applied once we've fully Provisioned and Installed all of our services. An example of a tool that can be leveraged to provide Cluster Configuration is Ansible. Alternatively, the services could Discover some or all of their Configuration via tools like Consul, DNS, DHCP.


Available
===============
After reaching the Available phase of Deployment, the product should be exactly that: available. More specifically being Available means all services should be able to be consumed by their intended consumers,

Options
===============


