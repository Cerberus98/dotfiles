import os
import shutil

from django.core.files import File
from django.core.files.base import ContentFile
from rest_framework import serializers

from .models import IsoBuild
from . import util


class IsoBuildSerializer(serializers.ModelSerializer):
    username = serializers.CharField(source='owner.username', read_only=True)

    class Meta:
        model = IsoBuild
        fields = ('id', 'config_file', 'config_hash', 'iso_file', 'owner',
                  'username', 'created')
        read_only_fields = ('id', 'config_file', 'config_hash', 'iso_file',
                            'owner', 'username', 'created')

    # override create method because we're using YAMLParser which is expected
    # to deserialize a yaml string into model fields, but what we want is a
    # sparta config yaml - the raw request data is what we're after here. Using
    # the YAMLParser class provides us with verification that the input is
    # at least valid yaml
    def create(self, validated_data):
        raw_data = self.context['request'].data
        config_hash, config_yaml = util.hash_config(raw_data)

        # check for existing object first
        try:
            instance = IsoBuild.objects.get(config_hash=config_hash,
                                            owner=self.context['request'].user)
            return instance
        except IsoBuild.DoesNotExist:
            pass

        # build the ISO
        config_file = ContentFile(config_yaml)
        iso_path = util.build_iso(config_file)
        iso_file = File(open(iso_path))

        # save the ISO object
        obj = IsoBuild.objects.create(owner=self.context['request'].user,
                                      config_hash=config_hash,
                                      iso_file=iso_file)
        # save the related config file
        obj.config_file.save('config.yaml', config_file)

        # clean up temp directory used by isobuilder
        shutil.rmtree(os.path.dirname(iso_path))
        return obj
