{% macro kickstart_network(interface, networks) -%}
network {% for k, v in interface.iteritems() %}{% if k != 'network' %}--{{ k }}{% if v is not none  %}={{ v }}{% endif %}{% endif %} {% endfor %}{% for k,v in networks[interface.network].iteritems() %}--{{ k }}={{ v }} {% endfor %}
{%- endmacro %}
#version=DEVEL
# System authorization information
auth --enableshadow --passalgo=sha512
# OSTree setup
ostreesetup --osname="rhel-atomic-host" --remote="rhel-atomic-host" --url="file:///install/ostree" --ref="rhel-atomic-host/7/x86_64/standard" --nogpg
# Use text install
text
# Run the Setup Agent on first boot
firstboot --enable
ignoredisk --only-use={{ disks.drive_list }}
# Keyboard layouts
keyboard --vckeymap=us --xlayouts='us'
# System language
lang en_US.UTF-8

# Network information
{% for interface in hosts[0]['interfaces'] %}
{{ kickstart_network(interface, networks) }}
{% endfor %}
network --hostname=localhost.localdomain

# Root password
rootpw --iscrypted $6$or5T4vd3vZnOYsOw$Hd5k4d02ilSs7aQygQShy/OmJLj.Axv64cymygqLUcjYfDBPNF7bd5OltuspQQCTXdm4FCC2V4XFRevK65fVP.
# System services
services --disabled="cloud-init,cloud-config,cloud-final,cloud-init-local"
services --enabled="chronyd"
# System timezone
timezone America/New_York --isUtc
# System bootloader configuration
bootloader --append=" crashkernel=auto ds=nocloud\;" --location=mbr --boot-drive={{ disks.boot_drive }}

#partitioning
autopart --type=lvm

# Partition clearing information
clearpart --all --initlabel --drives={{ disks.drive_list }}

%post --erroronfail
fn=/etc/ostree/remotes.d/rhel-atomic-host.conf; if test -f ${fn} && grep -q -e '^url=file:///install/ostree' ${fn}$; then rm ${fn}; fi
%end

%post --erroronfail
rm -f /etc/ostree/remotes.d/*.conf
echo 'unconfigured-state=This system is not registered to Red Hat Subscription Management. You can use subscription-manager to register.' >> $(ostree admin --print-current-dir).origin

%end

%post --erroronfail
/sbin/start_udev

# set up users
{%- for user, meta in users.iteritems() %}
useradd -m -U {{ user }}{% if 'groups' in meta and meta.groups|length > 0 %} -G {{ meta.groups|join(',') }}{% endif %}
mkdir -p /var/home/{{ user }}/.ssh
chmod 700 /var/home/{{ user }}/.ssh
touch /var/home/{{ user }}/.ssh/authorized_keys

  {%- if 'authorized_keys' in meta %}
    {%- for key in meta.authorized_keys %}
echo "{{ key }}" >> /var/home/{{ user }}/.ssh/authorized_keys
    {% endfor %}
  {%- endif -%}

chmod 600 /var/home/{{ user }}/.ssh/authorized_keys
chown -R {{ user }}:{{ user }} /var/home/{{ user }}
{% endfor %}

echo "growing the filesystem a bit"
lvextend -L+20G /dev/mapper/rhelah-root
xfs_growfs /

echo "copying overlay"
mkdir /mnt/iso
mount /dev/disk/by-label/Red\\x20Hat\\x20Enterprise\\x20Linux\\x20Atomic /mnt/iso
cp -r /mnt/iso/overlay/* /

echo "Generating self-signed certs for k8s"
chmod -R 755 /var/usrlocal/bin/generate-keys.sh

chmod -R 755 /var/usrlocal/bin/manifest-loader.sh
{% if bootstrapper is defined %}
chmod -R 755 /var/usrlocal/bin/bootstrapper.sh
{% else %}
rm -rf /var/usrlocal/bin/bootstrapper.sh
rm -rf /etc/systemd/system/bootstrapper.service
{% endif %}

{% if docker is not defined %}
rm -rf /var/roothome/.docker
{% endif %}

echo "copying node0 configs needed for other nodes"
mkdir -p /var/www/html/kickstart
cp /etc/sudoers /var/www/html/kickstart/sudoers
cp /etc/ssh/sshd_config /var/www/html/kickstart
cp /etc/sysconfig/docker /var/www/html/kickstart
chmod 755 /var/www/html/kickstart
chmod 644 /var/www/html/kickstart/*

echo "copying images needed to PXE boot other nodes"
mkdir -p /var/www/html/images
cp /mnt/iso/images/pxeboot/* /var/www/html/images

echo "copying atomic install repo"
mkdir -p /var/www/html/atomic-install-repo
cp -pr /mnt/iso/* /var/www/html/atomic-install-repo

echo "copying ostree install tree"
mkdir /mnt/squashfs
mkdir /mnt/rootfs
mount -o loop /var/www/html/atomic-install-repo/LiveOS/squashfs.img /mnt/squashfs
mount -o loop /mnt/squashfs/LiveOS/rootfs.img /mnt/rootfs

mkdir -p /var/www/html/rhel-atomic-install
cp -pr /mnt/rootfs/install/* /var/www/html/rhel-atomic-install

echo "updating selinux context labels"
chcon -Rt svirt_sandbox_file_t /var/www/html

umount /mnt/rootfs /mnt/squashfs /mnt/iso
rm -rf /mnt/rootfs /mnt/squashfs /mnt/iso

systemctl daemon-reload
systemctl enable etcd docker kubelet kube-proxy manifest-loader

{% if bootstrapper is defined %}
systemctl enable bootstrapper
{% endif %}

# set up NFS mounts if required
{%- if global.nfs_mounts %}
  {%- for mount in global.nfs_mounts %}
    {%- if mount.server != "vagrant" %}
echo "{{ mount.server }}:{{ mount.share }} {{ mount.mountpoint }} nfs {% if mount.options %}{{ mount.options }} {% else %}defaults {% endif %} 0 0" >> /etc/fstab
    {%- endif %}
  {%- endfor %}
{%- endif %}

%end

%packages
chrony
kexec-tools

%end

%addon com_redhat_kdump --enable --reserve-mb='auto'

%end

%anaconda
pwpolicy root --minlen=6 --minquality=50 --notstrict --nochanges --notempty
pwpolicy user --minlen=6 --minquality=50 --notstrict --nochanges --notempty
pwpolicy luks --minlen=6 --minquality=50 --notstrict --nochanges --notempty
%end

reboot --eject --kexec
