from OpenSSL import crypto


def _set_subject(subject, subject_fields):
    for field in ["C", "ST", "L", "O", "OU", "CN"]:
        if field in subject_fields:
            setattr(subject, field, subject_fields[field])


def generate_key(key_size=2048):
    key = crypto.PKey()
    key.generate_key(crypto.TYPE_RSA, key_size)
    return key


def generate_csr(key, subject_fields, hash_method="sha256"):
    csr = crypto.X509Req()
    _set_subject(csr.get_subject(), subject_fields)
    csr.set_pubkey(key)
    csr.sign(key, hash_method)
    return csr


def generate_cert(key, subject_fields, serial_number, cert_days,
                  hash_method, ca_key=None, ca_crt=None):
    if (ca_key is not None and ca_crt is None or
            ca_key is None and ca_crt is not None):
        raise Exception("Both the CA key and cert must be provided or "
                        "neither can be")

    cert = crypto.X509()
    _set_subject(cert.get_subject(), subject_fields)
    cert.set_serial_number(serial_number)
    cert.gmtime_adj_notBefore(0)
    days = cert_days * 60 * 60 * 24
    cert.gmtime_adj_notAfter(days)
    cert.set_issuer(cert.get_subject())
    cert.set_pubkey(key)
    cert.sign(key, hash_method)
    return cert


def create_ca(key_path, ca_path, subject_fields, serial_number,
              cert_days=10000, hash_method="sha256"):
    key = generate_key()
    cert = generate_cert(key, subject_fields, serial_number, cert_days,
                         hash_method)

    filetype = crypto.FILETYPE_PEM
    with open(key_path, 'w') as f:
        f.write(crypto.dump_privatekey(filetype, key))

    with open(ca_path, 'w') as f:
        f.write(crypto.dump_certificate(filetype, cert))

    return key, cert


def create_server_cert(ca_key, ca_crt, key_path, csr_path, cert_path,
                       subject_fields, cert_days=10000,
                       hash_method="sha256"):
    key = generate_key()
    csr = generate_csr(key, subject_fields)
    serial_number = ca_crt.get_serial_number() + 1
    cert = generate_cert(key, subject_fields, serial_number, cert_days,
                         ca_key=ca_key, ca_crt=ca_crt, hash_method=hash_method)

    filetype = crypto.FILETYPE_PEM
    with open(key_path, 'w') as f:
        f.write(crypto.dump_privatekey(filetype, key))

    with open(csr_path, 'w') as f:
        f.write(crypto.dump_certificate_request(filetype, csr))

    with open(cert_path, 'w') as f:
        f.write(crypto.dump_certificate(filetype, cert))

    return key, cert, csr
