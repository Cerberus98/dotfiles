#
# Copyright 2017, Cisco Systems
# All Rights Reserved.
#
import base64
import functools

import flask
import flask_login
import flask_restplus
from flask_restplus import fields

from tranquility import log, login_manager
from tranquility.api import models
from tranquility.api import auth_lib
from tranquility.api import utils

api = flask_restplus.Namespace(name='Auth', path='/', description='Public Key Authentication')

REQUEST = api.model(
    'LoginRequest', {
        'username': fields.String(
            required=True,
            pattern="^[A-Za-z0-9-_]+$",
            max_length=models.USERNAME_MAXLEN, ),
        'challenge': fields.String(required=False),
        'signatures': fields.List(fields.String(), required=False),
    })


@login_manager.user_loader
def load_user(uid):
    return models.User.query.get(int(uid))


def get_current_user(func):
    @functools.wraps(func)
    def wrapped(*args, **kwargs):
        flask.g.user = flask_login.current_user
        return func(*args, **kwargs)

    return wrapped


@api.route('/login', endpoint='auth')
class Auth(flask_restplus.Resource):
    method_decorators = [get_current_user]

    @utils.strict_expect(api, REQUEST)
    @api.response(200, 'Success')
    @api.response(401, 'Signature verification failed')
    def post(self):
        req_data = flask.request.json
        username = req_data['username']
        log.critical("A" * 80)
        log.critical(req_data)
        log.critical("A" * 80)

        challenge = req_data.get('challenge')
        if not challenge:
            return dict(challenge=auth_lib.new_challenge(username)), 401

        signatures = req_data.get('signatures')
        if not signatures:
            flask.abort(400, 'No signatures provided.')

        try:
            signatures = [base64.b64decode(x) for x in signatures]
        except TypeError:
            flask.abort(400, 'Error decoding signatures.')

        auth_lib.cleanup_challenges()
        user = auth_lib.verify_challenge(username, challenge, signatures)
        if not user:
            flask.abort(401, 'Signature verification failed.')

        flask_login.login_user(user)
        return ''
