Simulator pipeline

Scratch
- Initial Placement of a collection of objects in a collection of bags
  defined by the scenario
- Need deletes and full box evacuations mixed in
- Full audit log of every major even that happens in the system
   - VM moved from X to Y
   - VM deleted
   - Disk failure of host Z, causing all VMs to migrate to different hosts
- Fancy output
  - table output
  - graphs over time and instantaneous graphs at fixed intervals. Graphs only after events that change resource utilization
- We need to start abstracting the solver from the simulator now. It will make it easier to think about as two separate pieces later
- Scenarios may run until
  - completion
  - they've exhausted a maximum number of steps
  - they've failed to apply one or more VMs.
  - or they may be suspended and resumed at any time, for inspection
- We need a way to tap into running data and run queries on it, poke various pieces, possibly even change values while suspended
- Migration of VMs between PMs should be fully configurable
  - on or off at all
  - only at certain resource thresholds
  - at periodic intervals
- Fetching telemetry should be composable. First cut of the "increasing" initial ordering is allowed to know what a flavor us and look at all the dimensions.
  - We need to be able to define N attributes
  - We need to be able to define the weights of those attributes
- Flavors need to identify *everything* that could cause a VM to fit or not fit
  - all resource scalars
  - image_types (linux, windows)
  - hardware_types (GPU, standard)
- Types need to have soft and hard restrictions
- Colored output?
  - and could we do graphs/heatmaps/other visualizations from the CLI? That could be cool

Scenarios are metadata about a knapsack simuation to run.
They define the pretty names, the size of the knapsacks and the size of the things to put in the knapsacks
The size of the things and knapsacks in question are themselves controlled in the scenario file by a vector of resources with pretty names
Scenarios start with an "initial placement" which is arrangement of things in the various knapsacks before you got there
To support consistency, for any random numbers generated during the execution of a scenario can be set with a fixed seed defined in the scenario file



